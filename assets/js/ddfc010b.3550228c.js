"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[736],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return h}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(t),h=i,f=u["".concat(p,".").concat(h)]||u[h]||g[h]||o;return t?r.createElement(f,a(a({ref:n},c),{},{components:t})):r.createElement(f,a({ref:n},c))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=u;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},370:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return g}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],s={id:"fingerprint-injector",title:"Fingerprint Injector"},p=void 0,l={unversionedId:"guides/fingerprint-injector",id:"guides/fingerprint-injector",title:"Fingerprint Injector",description:"The Fingerprint injector is a sparse javascript library built for stealth override of browser signatures or so-called fingerprints. Overriding browser fingerprints help simulate real user browsers.",source:"@site/../docs/guides/injector.md",sourceDirName:"guides",slug:"/guides/fingerprint-injector",permalink:"/fingerprint-suite/docs/guides/fingerprint-injector",draft:!1,tags:[],version:"current",lastUpdatedBy:"Jind\u0159ich B\xe4r",lastUpdatedAt:1654097672,formattedLastUpdatedAt:"6/1/2022",frontMatter:{id:"fingerprint-injector",title:"Fingerprint Injector"},sidebar:"docs",previous:{title:"Header generator",permalink:"/fingerprint-suite/docs/guides/header-generator"},next:{title:"Examples",permalink:"/fingerprint-suite/docs/examples"}},c={},g=[{value:"Installation",id:"installation",level:2},{value:"Usage with the playwright",id:"usage-with-the-playwright",level:2},{value:"Usage with the puppeteer",id:"usage-with-the-puppeteer",level:2},{value:"Advanced usage with the Browser pool hooks system",id:"advanced-usage-with-the-browser-pool-hooks-system",level:2},{value:"API Reference",id:"api-reference",level:2}],u={toc:g};function h(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The Fingerprint injector is a sparse javascript library built for stealth override of browser signatures or so-called fingerprints. Overriding browser fingerprints help simulate real user browsers.\nThis library can inject fingerprints to ",(0,o.kt)("inlineCode",{parentName:"p"},"playwright")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"puppeteer")," controlled browsers through a unified interface.\nIt is recommended to use this library with the Apify ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/apify/fingerprint-generator"},(0,o.kt)("inlineCode",{parentName:"a"},"fingerprint-generator"))," to achieve the best results and meet the necessary fingerprint structure."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#installation"},"Installation")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#usage-with-the-playwright"},"Usage with the playwright")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#usage-with-the-puppeteer"},"Usage with the puppeteer")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#advanced-usage-with-the-browser-pool-hooks-system"},"Advanced usage with the Browser pool hooks system")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#api-reference"},"API Reference"))),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install fingerprint-injector\n")),(0,o.kt)("h2",{id:"usage-with-the-playwright"},"Usage with the playwright"),(0,o.kt)("p",null,"This example shows how to use fingerprint injector with ",(0,o.kt)("inlineCode",{parentName:"p"},"browser-pool")," plugin system, ",(0,o.kt)("inlineCode",{parentName:"p"},"playwright")," firefox browser, and the Apify ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/apify/fingerprint-generator"},(0,o.kt)("inlineCode",{parentName:"a"},"fingerprint-generator"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { PlaywrightPlugin } = require('browser-pool');\nconst FingerprintGenerator = require('fingerprint-generator');\nconst { FingerprintInjector }  = require('fingerprint-injector');\n\n// An asynchronous IIFE (immediately invoked function expression)\n// allows us to use the 'await' keyword.\n(async () => {\n    const playwrightPlugin = new PlaywrightPlugin(playwright.firefox, pluginOptions);\n    \n    const fingerprintGenerator = new FingerprintGenerator({\n        devices: ['desktop'],\n        browsers: [{ name: 'firefox', minVersion: 88 }],\n    });\n\n    const { fingerprint } = fingerprintGenerator.getFingerprint();\n\n    const fingerprintInjector = new FingerprintInjector();\n\n    const launchContext = playwrightPlugin.createLaunchContext();\n    const browser = await playwrightPlugin.launch(launchContext);\n    // Forward properties to the browserContext\n    const context = await browser.newContext({\n        userAgent: fingerprint.userAgent,\n        locale: fingerprint.navigator.language,\n    });\n   // Attach fingerprint\n   await fingerprintInjector.attachFingerprintToPlaywright(context, fingerprint);\n\n   const page = await context.newPage();\n})();\n")),(0,o.kt)("h2",{id:"usage-with-the-puppeteer"},"Usage with the puppeteer"),(0,o.kt)("p",null,"This example demonstrates, how to use the fingerprint injector library with puppeteer."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const FingerprintGenerator = require('fingerprint-generator');\nconst { FingerprintInjector } = require('fingerprint-injector');\nconst puppeteer = require('puppeteer')\n\n// An asynchronous IIFE (immediately invoked function expression)\n// allows us to use the 'await' keyword.\n(async () => {\n    const fingerprintInjector = new FingerprintInjector();\n\n    const fingerprintGenerator = new FingerprintGenerator({\n        devices: ['desktop'],\n        browsers: [{ name: 'chrome', minVersion: 88 }],\n    });\n\n    const { fingerprint } = fingerprintGenerator.getFingerprint();\n    const browser = await puppeteer.launch({headless: false})\n    const page = await browser.newPage();\n    // Attach fingerprint to page\n    await fingerprintInjector.attachFingerprintToPuppeteer(page, fingerprint);\n    // Now you can use the page\n    await page.goto('https://google.com')\n\n})();\n")),(0,o.kt)("h2",{id:"advanced-usage-with-the-browser-pool-hooks-system"},"Advanced usage with the Browser pool hooks system"),(0,o.kt)("p",null,"This approach handles injection for both incognito context and persistent context. It is also prepared for usage with both playwright nad puppeteer."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { BrowserPool, PlaywrightPlugin, PuppeteerPlugin } = require('browser-pool');\nconst FingerprintGenerator = require('fingerprint-generator');\nconst { FingerprintInjector } = require('fingerprint-injector');\nconst playwright = require('playwright');\n\n// An asynchronous IIFE (immediately invoked function expression)\n// allows us to use the 'await' keyword.\n(async () => {\n    const pluginOptions = {\n        launchOptions: {\n            headless: false,\n            channel: 'chrome',\n        },\n    };\n\n    const playwrightPlugin = new PlaywrightPlugin(playwright.chromium, pluginOptions);\n    const fingerprintGenerator = new FingerprintGenerator({\n        devices: ['desktop'],\n        browsers: [{ name: 'chrome', minVersion: 90 }],\n        operatingSystems: ['linux'],\n    });\n\n    const { fingerprint } = fingerprintGenerator.getFingerprint();\n    const fingerprintInjector = new FingerprintInjector({ fingerprint });\n\n    const browserPool = new BrowserPool({\n        browserPlugins: [playwrightPlugin],\n        preLaunchHooks: [(pageId, launchContext) => {\n            const { useIncognitoPages, launchOptions } = launchContext;\n\n            if (useIncognitoPages) {\n                return;\n            }\n\n            launchContext.launchOptions = {\n                ...launchOptions,\n                userAgent: fingerprint.userAgent,\n                viewport: {\n                    width: fingerprint.screen.width,\n                    height: fingerprint.screen.height,\n                },\n\n            };\n        }],\n        prePageCreateHooks: [\n            (pageId, browserController, pageOptions) => {\n                const { launchContext } = browserController;\n\n                if (launchContext.useIncognitoPages && pageOptions) {\n                    pageOptions.userAgent = fingerprint.userAgent;\n                    pageOptions.viewport = {\n                        width: fingerprint.screen.width,\n                        height: fingerprint.screen.height,\n                    };\n                }\n            },\n        ],\n        postPageCreateHooks: [\n            async (page, browserController) => {\n                const { browserPlugin, launchContext } = browserController;\n\n                if (browserPlugin instanceof PlaywrightPlugin) {\n                    const { useIncognitoPages, isFingerprintInjected } = launchContext;\n\n                    if (isFingerprintInjected) {\n                        // If not incognitoPages are used we would add the injection script over and over which could cause memory leaks.\n                        return;\n                    }\n                    console.log('Injecting fingerprint to playwright');\n\n                    const context = page.context();\n                    await fingerprintInjector.attachFingerprintToPlaywright(context, fingerprint);\n\n                    if (!useIncognitoPages) {\n                        // If not incognitoPages are used we would add the injection script over and over which could cause memory leaks.\n                        launchContext.extend({ isFingerprintInjected: true });\n                    }\n                } else if (browserPlugin instanceof PuppeteerPlugin) {\n                    console.log('Injecting fingerprint to puppeteer');\n                    await fingerprintInjector.attachFingerprintToPuppeteer(page, fingerprint);\n                }\n            },\n        ],\n    });\n\n    const page = await browserPool.newPage();\n    await page.goto('https://google.com');\n})();\n\n")),(0,o.kt)("h2",{id:"api-reference"},"API Reference"),(0,o.kt)("p",null,"All public classes, methods and their parameters can be inspected in this API reference."),(0,o.kt)("p",null,"{{>all-docs~}}"))}h.isMDXComponent=!0}}]);
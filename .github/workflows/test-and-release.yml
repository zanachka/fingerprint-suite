name: Run tests

on:
    # Push to master will deploy a dev version
    push:
        branches: [ main, renovate/** ]
    # PR to master branch will skip deployment
    pull_request:
        branches: [ main ]
    # A release via GitHub releases will deploy the latest version
    release:
        types: [ published ]
    workflow_dispatch:

jobs:
    lint:
        name: Lint
        if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v2
            - name: Use Node.js 16 
              uses: actions/setup-node@v1 
              with:
                node-version: 16

            - name: Install Dependencies
              run: npm ci

            - name: Load Cache
              uses: actions/cache@v2
              with:
                path: |
                  node_modules
                key: cache-${{ github.run_id }}

            - run: npm run lint

    build_and_test:
        name: Build & Test
        needs: [lint]
        runs-on: ${{ matrix.os }}

        strategy:
            matrix:
                os: [ ubuntu-latest ]
                node-version: [ 16, 18 ]

        steps:
            - uses: actions/checkout@v2
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                node-version: ${{ matrix.node-version }}

            - name: Cache Node Modules
              uses: actions/cache@v2
              with:
                  path: |
                      node_modules
                  key: cache-${{ github.run_id }}
            
            - name: Install playwright deps
              run : npx playwright install --with-deps 

            - name: Turbo cache
              id: turbo-cache
              uses: actions/cache@v2
              with:
                path: .turbo
                key: turbo-${{ github.job }}-${{ github.ref_name }}-${{ github.sha }}
                restore-keys: |
                    turbo-${{ github.job }}-${{ github.ref_name }}-
            
            - name: Build
              run: npm run ci:build

            - name: Run Windows or MacOs tests
              run: npm test
              if: ${{ matrix.os == 'windows-latest' || matrix.os == 'macos-latest' }}

            - name: Run Linux tests
              run: xvfb-run --auto-servernum -- npm test
              if: ${{ matrix.os == 'ubuntu-latest'}}


    publish:
        name: Publish
        if: (github.ref == 'refs/heads/prepublish' || github.event_name == 'release') && !contains(github.event.head_commit.message, '[skip ci]')
        runs-on: ubuntu-latest
        needs: [ lint, build_and_test ]
        steps:
            -   name: Checkout Source code
                uses: actions/checkout@v3

            -   name: Use Node.js 16
                uses: actions/setup-node@v3
                with:
                    node-version: 16
                    cache: 'npm'
                    cache-dependency-path: 'package-lock.json'

            -   name: Turbo cache
                id: turbo-cache
                uses: actions/cache@v2
                with:
                    path: .turbo
                    key: turbo-${{ github.job }}-${{ github.ref_name }}-${{ github.sha }}
                    restore-keys: |
                        turbo-${{ github.job }}-${{ github.ref_name }}-

            -   name: Install Dependencies
                run: npm ci

            -   name: Check for changes
                id: changed_packages
                run: |
                    echo "::set-output name=changed_packages::$(node ./node_modules/.bin/lerna changed -p | wc -l | xargs)"

            -   name: Check for changes 2
                if: steps.changed_packages.outputs.changed_packages == '0'
                run: |
                    echo "no changes detected by lerna"

            -   name: Build
                if: steps.changed_packages.outputs.changed_packages != '0'
                run: npm run build

            -   name: Set Release Tag
                run: echo "RELEASE_TAG=$(if [ ${{ github.event_name }} = release ]; then echo latest; else echo next; fi)" >> $GITHUB_ENV

            -   name: Release dev version for testing
                if: env.RELEASE_TAG == 'next' && steps.changed_packages.outputs.changed_packages != '0'
                run: |
                    git config --global user.name 'Apify Release Bot'
                    git config --global user.email 'noreply@apify.com'
                    npx turbo run copy --force -- -- --canary --preid=dev
                    git commit -am 'chore: bump canary versions [skip ci]'

                    echo "access=public" >> .npmrc
                    echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> .npmrc
                    npm run publish:next -- --yes --no-verify-access
                env:
                    NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
                    GIT_USER: "noreply@apify.com:${{ secrets.GH_TOKEN }}"
                    GH_TOKEN: ${{ secrets.GH_TOKEN }}
